name: Deploy MERN Stack to Kubernetes

on:
  push:
    branches: [main]
    paths:
      - "front/**"
      - "back/**"
      - ".github/workflows/deploy.yml"
      - "k8s/**"
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - "front/**"
      - "back/**"
      - ".github/workflows/deploy.yml"
      - "k8s/**"

env:
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: fs1 # Use self-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/fs1-mern-backend:${{ env.IMAGE_TAG }},${{ env.DOCKER_REGISTRY }}/fs1-mern-backend:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/fs1-mern-backend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/fs1-mern-backend:buildcache,mode=max

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/fs1-mern-frontend:${{ env.IMAGE_TAG }},${{ env.DOCKER_REGISTRY }}/fs1-mern-frontend:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/fs1-mern-frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/fs1-mern-frontend:buildcache,mode=max

      - name: Set up kubectl
        run: |
          echo "Using Kubernetes configuration from runner"

      - name: Create MongoDB Secret
        run: |
          # Create MongoDB Secret from GitHub Secrets
          cat <<EOF > mongodb-secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: mongodb-credentials
          type: Opaque
          stringData:
            uri: ${{ secrets.MONGO_URI }}
            username: ${{ secrets.MONGO_USER }}
            password: ${{ secrets.MONGO_PASSWORD }}
          EOF

          kubectl apply -f mongodb-secret.yaml
          rm mongodb-secret.yaml  # Delete the temporary file

      - name: Deploy to Kubernetes
        run: |
          # Replace placeholders in Kubernetes manifests
          sed -i "s|\${DOCKER_REGISTRY}|${{ env.DOCKER_REGISTRY }}|g" ./k8s/backend-statefulset.yaml
          sed -i "s|\${IMAGE_TAG}|${{ env.IMAGE_TAG }}|g" ./k8s/backend-statefulset.yaml

          sed -i "s|\${DOCKER_REGISTRY}|${{ env.DOCKER_REGISTRY }}|g" ./k8s/frontend-statefulset.yaml
          sed -i "s|\${IMAGE_TAG}|${{ env.IMAGE_TAG }}|g" ./k8s/frontend-statefulset.yaml

          # Apply K8s manifests
          kubectl apply -f ./k8s/backend-service.yaml
          kubectl apply -f ./k8s/frontend-service.yaml
          kubectl apply -f ./k8s/backend-statefulset.yaml
          kubectl apply -f ./k8s/frontend-statefulset.yaml
          kubectl apply -f ./k8s/ingress.yaml

      - name: Verify deployment
        run: |
          echo "Waiting for backend deployment to be ready..."
          kubectl rollout status statefulset/backend --timeout=180s

          echo "Waiting for frontend deployment to be ready..."
          kubectl rollout status statefulset/frontend --timeout=180s

          echo "Deployment completed successfully!"

          echo "Services:"
          kubectl get svc | grep -E 'frontend|backend'

          echo "Pods:"
          kubectl get pods | grep -E 'frontend|backend'

          echo "Ingress:"
          kubectl get ingress
